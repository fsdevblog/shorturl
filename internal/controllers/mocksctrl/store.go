// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocksctrl is a generated GoMock package.
package mocksctrl

import (
	context "context"
	reflect "reflect"

	models "github.com/fsdevblog/shorturl/internal/models"
	services "github.com/fsdevblog/shorturl/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionChecker is a mock of ConnectionChecker interface.
type MockConnectionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionCheckerMockRecorder
}

// MockConnectionCheckerMockRecorder is the mock recorder for MockConnectionChecker.
type MockConnectionCheckerMockRecorder struct {
	mock *MockConnectionChecker
}

// NewMockConnectionChecker creates a new mock instance.
func NewMockConnectionChecker(ctrl *gomock.Controller) *MockConnectionChecker {
	mock := &MockConnectionChecker{ctrl: ctrl}
	mock.recorder = &MockConnectionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionChecker) EXPECT() *MockConnectionCheckerMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockConnectionChecker) CheckConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockConnectionCheckerMockRecorder) CheckConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockConnectionChecker)(nil).CheckConnection), ctx)
}

// MockShortURLStore is a mock of ShortURLStore interface.
type MockShortURLStore struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLStoreMockRecorder
}

// MockShortURLStoreMockRecorder is the mock recorder for MockShortURLStore.
type MockShortURLStoreMockRecorder struct {
	mock *MockShortURLStore
}

// NewMockShortURLStore creates a new mock instance.
func NewMockShortURLStore(ctrl *gomock.Controller) *MockShortURLStore {
	mock := &MockShortURLStore{ctrl: ctrl}
	mock.recorder = &MockShortURLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLStore) EXPECT() *MockShortURLStoreMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockShortURLStore) BatchCreate(ctx context.Context, visitorUUID *string, rawURLs []string) (*services.BatchCreateShortURLsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, visitorUUID, rawURLs)
	ret0, _ := ret[0].(*services.BatchCreateShortURLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockShortURLStoreMockRecorder) BatchCreate(ctx, visitorUUID, rawURLs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockShortURLStore)(nil).BatchCreate), ctx, visitorUUID, rawURLs)
}

// Create mocks base method.
func (m *MockShortURLStore) Create(ctx context.Context, visitorUUID *string, rawURL string) (*models.URL, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, visitorUUID, rawURL)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockShortURLStoreMockRecorder) Create(ctx, visitorUUID, rawURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortURLStore)(nil).Create), ctx, visitorUUID, rawURL)
}

// GetAllByVisitorUUID mocks base method.
func (m *MockShortURLStore) GetAllByVisitorUUID(ctx context.Context, visitorUUID string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByVisitorUUID", ctx, visitorUUID)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByVisitorUUID indicates an expected call of GetAllByVisitorUUID.
func (mr *MockShortURLStoreMockRecorder) GetAllByVisitorUUID(ctx, visitorUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByVisitorUUID", reflect.TypeOf((*MockShortURLStore)(nil).GetAllByVisitorUUID), ctx, visitorUUID)
}

// GetByShortIdentifier mocks base method.
func (m *MockShortURLStore) GetByShortIdentifier(ctx context.Context, shortID string) (*models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortIdentifier", ctx, shortID)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortIdentifier indicates an expected call of GetByShortIdentifier.
func (mr *MockShortURLStoreMockRecorder) GetByShortIdentifier(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortIdentifier", reflect.TypeOf((*MockShortURLStore)(nil).GetByShortIdentifier), ctx, shortID)
}

// GetByURL mocks base method.
func (m *MockShortURLStore) GetByURL(ctx context.Context, rawURL string) (*models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", ctx, rawURL)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockShortURLStoreMockRecorder) GetByURL(ctx, rawURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockShortURLStore)(nil).GetByURL), ctx, rawURL)
}

// MarkAsDeleted mocks base method.
func (m *MockShortURLStore) MarkAsDeleted(ctx context.Context, shortIDs []string, visitorUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDeleted", ctx, shortIDs, visitorUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDeleted indicates an expected call of MarkAsDeleted.
func (mr *MockShortURLStoreMockRecorder) MarkAsDeleted(ctx, shortIDs, visitorUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDeleted", reflect.TypeOf((*MockShortURLStore)(nil).MarkAsDeleted), ctx, shortIDs, visitorUUID)
}
