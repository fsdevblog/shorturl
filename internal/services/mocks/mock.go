// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/fsdevblog/shorturl/internal/models"
	repositories "github.com/fsdevblog/shorturl/internal/repositories"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockURLRepository) BatchCreate(ctx context.Context, mURLs []repositories.BatchCreateArg) (*repositories.BatchCreateShortURLsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, mURLs)
	ret0, _ := ret[0].(*repositories.BatchCreateShortURLsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockURLRepositoryMockRecorder) BatchCreate(ctx, mURLs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockURLRepository)(nil).BatchCreate), ctx, mURLs)
}

// Create mocks base method.
func (m *MockURLRepository) Create(ctx context.Context, mURL *models.URL) (*models.URL, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, mURL)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockURLRepositoryMockRecorder) Create(ctx, mURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLRepository)(nil).Create), ctx, mURL)
}

// DeleteByShortIDsVisitorUUID mocks base method.
func (m *MockURLRepository) DeleteByShortIDsVisitorUUID(ctx context.Context, visitorUUID string, shortIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByShortIDsVisitorUUID", ctx, visitorUUID, shortIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByShortIDsVisitorUUID indicates an expected call of DeleteByShortIDsVisitorUUID.
func (mr *MockURLRepositoryMockRecorder) DeleteByShortIDsVisitorUUID(ctx, visitorUUID, shortIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByShortIDsVisitorUUID", reflect.TypeOf((*MockURLRepository)(nil).DeleteByShortIDsVisitorUUID), ctx, visitorUUID, shortIDs)
}

// GetAll mocks base method.
func (m *MockURLRepository) GetAll(ctx context.Context) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockURLRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockURLRepository)(nil).GetAll), ctx)
}

// GetAllByVisitorUUID mocks base method.
func (m *MockURLRepository) GetAllByVisitorUUID(ctx context.Context, visitorUUID string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByVisitorUUID", ctx, visitorUUID)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByVisitorUUID indicates an expected call of GetAllByVisitorUUID.
func (mr *MockURLRepositoryMockRecorder) GetAllByVisitorUUID(ctx, visitorUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByVisitorUUID", reflect.TypeOf((*MockURLRepository)(nil).GetAllByVisitorUUID), ctx, visitorUUID)
}

// GetByShortIdentifier mocks base method.
func (m *MockURLRepository) GetByShortIdentifier(ctx context.Context, shortID string) (*models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortIdentifier", ctx, shortID)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortIdentifier indicates an expected call of GetByShortIdentifier.
func (mr *MockURLRepositoryMockRecorder) GetByShortIdentifier(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortIdentifier", reflect.TypeOf((*MockURLRepository)(nil).GetByShortIdentifier), ctx, shortID)
}

// GetByURL mocks base method.
func (m *MockURLRepository) GetByURL(ctx context.Context, rawURL string) (*models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", ctx, rawURL)
	ret0, _ := ret[0].(*models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockURLRepositoryMockRecorder) GetByURL(ctx, rawURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockURLRepository)(nil).GetByURL), ctx, rawURL)
}
